@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Forsaken;

@namespace Facepunch.Forsaken.UI
@attribute [StyleSheet( "/ui/inventory/Storage.scss" )]
@inherits Panel
@implements IDialog

@if ( !ForsakenPlayer.Me.IsValid() ) return;
@if ( !Container.IsValid() ) return;

@{
    var backpack = ForsakenPlayer.Me.Backpack;
    if ( !backpack.IsValid() ) return;

    var hotbar = ForsakenPlayer.Me.Hotbar;
    if ( !hotbar.IsValid() ) return;
}

<root>
    <div>
        <div class="backpack">
            <label class="title">Backpack</label>

            <div class="slots">
                @for ( ushort i = 0; i < backpack.SlotLimit; i++ )
                {
                    var item = backpack.GetFromSlot( i );
                    <InventorySlot Container=@backpack Slot=@i Item=@item></InventorySlot>
                }
            </div>
        </div>
        <div class="storage">
            <label class="title">@Name</label>

            <div class="slots">
                @for ( ushort i = 0; i < Container.SlotLimit; i++ )
                {
                    var item = Container.GetFromSlot( i );
                    <InventorySlot Container=@Container Slot=@i Item=@item></InventorySlot>
                }
            </div>
        </div>
    </div>

    <div>
        <div class="hotbar">
            <label class="title">Hotbar</label>

            <div class="slots">
                @for ( ushort i = 0; i < hotbar.SlotLimit; i++ )
                {
                    var item = hotbar.GetFromSlot( i );
                    <InventorySlot Container=@hotbar Slot=@i Item=@item></InventorySlot>
                }
            </div>
        </div>
    </div>
</root>

@code
{
    public static Storage Current { get; private set; }

    public InventoryContainer Container { get; private set; }
    public bool IsOpen { get; private set; }
    public Entity Entity { get; private set; }
    public string Name { get; private set; }

    public Storage()
    {
        Current = this;
        BindClass( "hidden", () => !IsOpen );
    }

    public void Open()
    {
        if ( IsOpen ) return;
        Dialog.Activate( this );
        IsOpen = true;
    }

    public void Close()
    {
        if ( !IsOpen ) return;
        Dialog.Deactivate( this );
        IsOpen = false;
    }

    public void SetName( string name )
    {
        Name = name;
    }

    public void SetEntity( Entity entity )
    {
        Entity = entity;
    }

    public void SetContainer( InventoryContainer container )
    {
        if ( !ForsakenPlayer.Me.IsValid() ) return;

        Container = container;
        Container.SetTransferHandler( GetTransferTarget );
    }

    protected override int BuildHash()
    {
        var backpack = ForsakenPlayer.Me?.Backpack;
        var hotbar = ForsakenPlayer.Me?.Hotbar;

        return HashCode.Combine( ForsakenPlayer.Me, backpack, hotbar, Container );
    }

    private InventoryContainer GetTransferTarget( InventoryItem item )
    {
        return ForsakenPlayer.Me?.Backpack;
    }
}
