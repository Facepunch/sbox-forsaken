@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Forsaken;
@using System.Collections.Generic;
@using Conna.Inventory;

@namespace Facepunch.Forsaken.UI
@attribute [StyleSheet( "/ui/crafting/CraftingQueueItem.scss" )]
@inherits Panel
@implements ITooltipProvider

<root>
    <div @ref="Glow" class="glow"></div>
    <div @ref="Icon" class="icon"></div>

    @if ( TimeLeft > 0 )
    {
        <label class="timeleft">@(TimeLeft)s</label>
    }

    @if ( Entry != null )
    {
        <label class="quantity">x@(Entry.Quantity)</label>
    }
</root>

@code
{
    public Action<CraftingQueueEntry> OnSelected { get; set; }
    public CraftingQueueEntry Entry { get; set; }

    public string Description => Output.Description;
    public IReadOnlySet<string> Tags => Output.Tags;
    public int TimeLeft => Entry?.FinishTime.Relative.CeilToInt() ?? 0;
    public string Name => Output.Name;
    public Color Color => (Output as InventoryItem)?.Color ?? Color.White;
    public bool IsEmpty => !Output.IsValid();

    private IInventoryItem Output { get; set; }
    private Panel Icon { get; set; }
    private Panel Glow { get; set; }

    public CraftingQueueItem()
    {
        AddEventListener( "onclick", () => OnSelected?.Invoke( Entry ) );
        BindClass( "is-empty", () => IsEmpty );
    }

    public void AddTooltipInfo( Panel container )
    {
        if ( Output is not InventoryItem item ) return;

        if ( item.IsValid() )
        {
            item.AddTooltipInfo( container );
        }
    }

    protected override void OnMouseOver( MousePanelEvent e )
    {
        if ( Output.IsValid() )
        {
            CustomTooltip.Show( this );
        }

        base.OnMouseOver( e );
    }

    protected override void OnMouseOut( MousePanelEvent e )
    {
        CustomTooltip.Hide( this );
        base.OnMouseOut( e );
    }

    protected override void OnParametersSet()
    {
        if ( Entry == null )
        {
            Output = null;
            return;
        }

        Output = InventorySystem.GetDefinition( Entry.Recipe.Output );
        base.OnParametersSet();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( TimeLeft );
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        var item = Output as InventoryItem;

        if ( item.IsValid() )
        {
            var icon = item.Icon;

            if ( !string.IsNullOrEmpty( icon ) )
            {
                Icon.Style.SetBackgroundImage( icon );
                Icon.Style.BackgroundTint = item.IconTintColor;
            }
            else
            {
                Icon.Style.BackgroundImage = null;
            }

            Glow.Style.SetRadialGradientBackground( item.Color, 0.6f, Color.Black, 0f );
        }

        base.OnAfterTreeRender( firstTime );
    }
}
